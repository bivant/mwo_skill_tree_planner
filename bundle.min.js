(function () {
'use strict';

// First element of the nodes array MUST be the root node of the skll graph

var treeSource = [
/*
==========================================
                 WEAPONS
==========================================
*/
{
  name: "Weapons",
  nodes: [{ name: "Range 1",
    attribute: "Weapon Range",
    value: "1",
    leftChildId: "range-2",
    rightChildId: "range-3"
  }, { name: "Range 2",
    attribute: "Weapon Range",
    value: "1",
    leftChildId: "range-4",
    rightChildId: "range-5"
  }, { name: "Range 3",
    attribute: "Weapon Range",
    value: "1",
    leftChildId: "range-5",
    rightChildId: "range-6"
  }, { name: "Range 4",
    attribute: "Weapon Range",
    value: "1",
    leftChildId: "cooldown-1",
    centerChildId: "high-explosive-1",
    rightChildId: "velocity-1"
  }, { name: "Range 5",
    attribute: "Weapon Range",
    value: "1",
    centerChildId: "cooldown-4"
  }, { name: "Range 6",
    attribute: "Weapon Range",
    value: "1",
    leftChildId: "velocity-2",
    centerChildId: "gauss-charge-1",
    rightChildId: "cooldown-2"
  }, { name: "Cooldown 1",
    attribute: "Weapon Cooldown",
    value: "0.75",
    leftChildId: "cooldown-3"
  }, { name: "Velocity 1",
    attribute: "Weapon Velocity",
    value: "2",
    rightChildId: "cooldown-4"
  }, { name: "Velocity 2",
    attribute: "Weapon Velocity",
    value: "2",
    leftChildId: "cooldown-4"
  }, { name: "Cooldown 2",
    attribute: "Weapon Cooldown",
    value: "0.75",
    rightChildId: "cooldown-5"
  }, { name: "Cooldown 3",
    attribute: "Weapon Cooldown",
    value: "0.75",
    leftChildId: "range-7",
    centerChildId: "missile-spread-1",
    rightChildId: "heat-gen-1"
  }, { name: "High Explosive 1",
    attribute: "Missile Crit Damage",
    value: "7.5",
    leftChildId: "heat-gen-1"
  }, { name: "Cooldown 4",
    attribute: "Weapon Cooldown",
    value: "0.75",
    centerChildId: "cooldown-6"
  }, { name: "Gauss Charge 1",
    attribute: "Gauss Held Time",
    value: "0.5",
    rightChildId: "heat-gen-2"
  }, { name: "Cooldown 5",
    attribute: "Weapon Cooldown",
    value: "0.75",
    leftChildId: "heat-gen-2",
    centerChildId: "lbx-spread-1",
    rightChildId: "range-8"
  }, { name: "Range 7",
    attribute: "Weapon Range",
    value: "1",
    leftChildId: "range-9"
  }, { name: "Heat Gen 1",
    attribute: "Weapon Heat Gen",
    value: "0.75",
    leftChildId: "missile-spread-1",
    rightChildId: "heat-gen-3"
  }, { name: "Heat Gen 2",
    attribute: "Weapon Heat Gen",
    value: "0.75",
    leftChildId: "heat-gen-4",
    rightChildId: "lbx-spread-1"
  }, { name: "Range 8",
    attribute: "Weapon Range",
    value: "1",
    rightChildId: "range-10"
  }, { name: "Range 9",
    attribute: "Weapon Range",
    value: "1",
    rightChildId: "cooldown-7"
  }, { name: "Missile Spread 1",
    attribute: "Missile Spread",
    value: "2.5",
    leftChildId: "cooldown-7"
  }, { name: "Heat Gen 3",
    attribute: "Weapon Heat Gen",
    value: "0.75",
    leftChildId: "velocity-3",
    rightChildId: "range-11"
  }, { name: "Cooldown 6",
    attribute: "Weapon Cooldown",
    value: "0.75",
    leftChildId: "range-11",
    centerChildId: "laser-duration-1",
    rightChildId: "range-12"
  }, { name: "Heat Gen 4",
    attribute: "Weapon Heat Gen",
    value: "0.75",
    leftChildId: "range-12",
    rightChildId: "velocity-4"
  }, { name: "LBX Spread 1",
    attribute: "LBX Spread",
    value: "5",
    rightChildId: "cooldown-8"
  }, { name: "Range 10",
    attribute: "Weapon Range",
    value: "1",
    leftChildId: "cooldown-8",
    rightChildId: "uac-jam-chance-1"
  }, { name: "Cooldown 7",
    attribute: "Weapon Cooldown",
    value: "0.75",
    leftChildId: "heat-gen-5",
    rightChildId: "heat-gen-6"
  }, { name: "Velocity 3",
    attribute: "Weapon Velocity",
    value: "2",
    leftChildId: "heat-gen-6"
  }, { name: "Range 11",
    attribute: "Weapon Range",
    value: "1",
    leftChildId: "range-13",
    rightChildId: "laser-duration-1"
  }, { name: "Range 12",
    attribute: "Weapon Range",
    value: "1",
    leftChildId: "laser-duration-1",
    rightChildId: "range-14"
  }, { name: "Velocity 4",
    attribute: "Weapon Velocity",
    value: "2",
    rightChildId: "cooldown-9"
  }, { name: "Cooldown 8",
    attribute: "Weapon Cooldown",
    value: "0.75",
    leftChildId: "cooldown-9",
    centerChildId: "gauss-charge-2",
    rightChildId: "heat-gen-7"
  }, { name: "UAC Jam Chance 1",
    attribute: "UAC Jam Chance",
    value: "2.5"
  }, { name: "Heat Gen 5",
    attribute: "Weapon Heat Gen",
    value: "0.75",
    leftChildId: "cooldown-10"
  }, { name: "Heat Gen 6",
    attribute: "Weapon Heat Gen",
    value: "0.75",
    leftChildId: "high-explosive-2",
    centerChildId: "laser-duration-2",
    rightChildId: "heat-gen-8"
  }, { name: "Range 13",
    attribute: "Weapon Range",
    value: "1",
    leftChildId: "heat-gen-8",
    rightChildId: "missile-rack-1"
  }, { name: "Laser Duration 1",
    attribute: "Laser Duration",
    value: "3.75",
    centerChildId: "cooldown-12"
  }, { name: "Range 14",
    attribute: "Weapon Range",
    value: "1",
    leftChildId: "magazine-capacity-1",
    rightChildId: "heat-gen-9"
  }, { name: "Cooldown 9",
    attribute: "Weapon Cooldown",
    value: "0.75",
    leftChildId: "heat-gen-9",
    centerChildId: "laser-duration-3",
    rightChildId: "gauss-charge-2"
  }, { name: "Heat Gen 7",
    attribute: "Weapon Heat Gen",
    value: "0.75",
    rightChildId: "cooldown-11"
  }, { name: "Cooldown 10",
    attribute: "Weapon Cooldown",
    value: "0.75",
    rightChildId: "missile-rack-2"
  }, { name: "High Explosive 2",
    attribute: "Missile Crit Damage",
    value: "7.5",
    rightChildId: "laser-duration-2"
  }, { name: "Heat Gen 8",
    attribute: "Weapon Heat Gen",
    value: "0.75",
    leftChildId: "laser-duration-2",
    centerChildId: "cooldown-13"
  }, { name: "Missile Rack 1",
    attribute: "Missile Ammo",
    value: "1",
    rightChildId: "cooldown-12"
  }, { name: "Magazine Capacity 1",
    attribute: "Ballistic Ammo",
    value: "8",
    leftChildId: "cooldown-12"
  }, { name: "Heat Gen 9",
    attribute: "Weapon Heat Gen",
    value: "0.75",
    centerChildId: "cooldown-14",
    rightChildId: "laser-duration-3"
  }, { name: "Gauss Charge 2",
    attribute: "Gauss Held Time",
    value: "0.5",
    leftChildId: "laser-duration-3"
  }, { name: "Cooldown 11",
    attribute: "Weapon Cooldown",
    value: "0.75",
    leftChildId: "magazine-capacity-2"
  }, { name: "Missile Rack 2",
    attribute: "Missile Ammo",
    value: "1"
  }, { name: "Laser Duration 2",
    attribute: "Laser Duration",
    value: "3.75",
    rightChildId: "cooldown-13"
  }, { name: "Cooldown 12",
    attribute: "Weapon Cooldown",
    value: "0.75",
    leftChildId: "range-15",
    rightChildId: "velocity-5"
  }, { name: "Laser Duration 3",
    attribute: "Laser Duration",
    value: "3.75",
    leftChildId: "cooldown-14"
  }, { name: "Magazine Capacity 2",
    attribute: "Ballistic Ammo",
    value: "8"
  }, { name: "Cooldown 13",
    attribute: "Weapon Cooldown",
    value: "0.75",
    leftChildId: "heat-gen-10",
    rightChildId: "heat-gen-11"
  }, { name: "Range 15",
    attribute: "Weapon Range",
    value: "1",
    leftChildId: "heat-gen-11",
    rightChildId: "cooldown-15"
  }, { name: "Velocity 5",
    attribute: "Weapon Velocity",
    value: "2",
    leftChildId: "cooldown-15",
    rightChildId: "heat-gen-12"
  }, { name: "Cooldown 14",
    attribute: "Weapon Cooldown",
    value: "0.75",
    leftChildId: "heat-gen-12",
    rightChildId: "cooldown-16"
  }, { name: "Heat Gen 10",
    attribute: "Weapon Heat Gen",
    value: "0.75"
  }, { name: "Heat Gen 11",
    attribute: "Weapon Heat Gen",
    value: "0.75",
    centerChildId: "heat-gen-13"
  }, { name: "Cooldown 15",
    attribute: "Weapon Cooldown",
    value: "0.75",
    leftChildId: "missile-spread-2",
    centerChildId: "laser-duration-4",
    rightChildId: "uac-jam-chance-2"
  }, { name: "Heat Gen 12",
    attribute: "Weapon Heat Gen",
    value: "0.75",
    centerChildId: "heat-gen-14",
    rightChildId: "lbx-spread-2"
  }, { name: "Cooldown 16",
    attribute: "Weapon Cooldown",
    value: "0.75",
    leftChildId: "lbx-spread-2"
  }, { name: "Missile Spread 2",
    attribute: "Missile Spread",
    value: "2.5"
  }, { name: "UAC Jam Chance 2",
    attribute: "UAC Jam Chance",
    value: "2.5"
  }, { name: "LBX Spread 2",
    attribute: "LBX Spread",
    value: "5"
  }, { name: "Heat Gen 13",
    attribute: "Weapon Heat Gen",
    value: "0.75"
  }, { name: "Laser Duration 4",
    attribute: "Laser Duration",
    value: "3.75"
  }, { name: "Heat Gen 14",
    attribute: "Weapon Heat Gen",
    value: "0.75"
  }]
},
/*
==========================================
                SURVIVAL
==========================================
*/
{
  name: 'Survival',
  nodes: [{ name: "Reinforced Casing 1",
    attribute: "Crit Chance (Received)",
    value: "1",
    leftChildId: "shock-absorbance-1",
    rightChildId: "ams-overload-1"
  }, { name: "Shock Absorbance 1",
    attribute: "Fall Damage",
    value: "10",
    centerChildId: "reinforced-casing-2",
    rightChildId: "skeletal-density-1"
  }, { name: "AMS Overload 1",
    attribute: "AMS Effectiveness",
    value: "1.25",
    leftChildId: "skeletal-density-1",
    centerChildId: "reinforced-casing-3"
  }, { name: "Skeletal Density 1",
    attribute: "Internal Structure",
    value: "3.1",
    leftChildId: "reinforced-casing-2",
    rightChildId: "reinforced-casing-3"
  }, { name: "Reinforced Casing 2",
    attribute: "Crit Chance (Received)",
    value: "1",
    leftChildId: "armor-hardening-1",
    centerChildId: "ams-overload-2"
  }, { name: "Reinforced Casing 3",
    attribute: "Crit Chance (Received)",
    value: "1",
    centerChildId: "shock-absorbance-3",
    rightChildId: "skeletal-density-2"
  }, { name: "Armor Hardening 1",
    attribute: "Armor",
    value: "1.6",
    leftChildId: "shock-absorbance-2",
    centerChildId: "skeletal-density-3",
    rightChildId: "ams-overload-2"
  }, { name: "Skeletal Density 2",
    attribute: "Internal Structure",
    value: "3.1",
    leftChildId: "shock-absorbance-3",
    centerChildId: "reinforced-casing-4",
    rightChildId: "shock-absorbance-4"
  }, { name: "Shock Absorbance 2",
    attribute: "Fall Damage",
    value: "10",
    leftChildId: "armor-hardening-2",
    rightChildId: "skeletal-density-3"
  }, { name: "AMS Overload 2",
    attribute: "AMS Effectiveness",
    value: "1.25",
    leftChildId: "skeletal-density-3",
    rightChildId: "skeletal-density-4"
  }, { name: "Shock Absorbance 3",
    attribute: "Fall Damage",
    value: "10",
    leftChildId: "skeletal-density-4",
    rightChildId: "reinforced-casing-4"
  }, { name: "Shock Absorbance 4",
    attribute: "Fall Damage",
    value: "10",
    leftChildId: "reinforced-casing-4",
    rightChildId: "armor-hardening-3"
  }, { name: "Armor Hardening 2",
    attribute: "Armor",
    value: "1.6",
    rightChildId: "reinforced-casing-5"
  }, { name: "Skeletal Density 3",
    attribute: "Internal Structure",
    value: "3.1",
    leftChildId: "reinforced-casing-5",
    centerChildId: "armor-hardening-5"
  }, { name: "Skeletal Density 4",
    attribute: "Internal Structure",
    value: "3.1",
    centerChildId: "skeletal-density-5"
  }, { name: "Reinforced Casing 4",
    attribute: "Crit Chance (Received)",
    value: "1",
    centerChildId: "skeletal-density-6",
    rightChildId: "reinforced-casing-7"
  }, { name: "Armor Hardening 3",
    attribute: "Armor",
    value: "1.6",
    leftChildId: "reinforced-casing-7"
  }, { name: "Reinforced Casing 5",
    attribute: "Crit Chance (Received)",
    value: "1",
    leftChildId: "armor-hardening-4",
    rightChildId: "armor-hardening-5"
  }, { name: "Reinforced Casing 7",
    attribute: "Crit Chance (Received)",
    value: "1",
    leftChildId: "skeletal-density-6",
    rightChildId: "skeletal-density-7"
  }, { name: "Armor Hardening 4",
    attribute: "Armor",
    value: "1.6"
  }, { name: "Armor Hardening 5",
    attribute: "Armor",
    value: "1.6",
    rightChildId: "reinforced-casing-6"
  }, { name: "Skeletal Density 5",
    attribute: "Internal Structure",
    value: "3.1",
    leftChildId: "reinforced-casing-6",
    rightChildId: "reinforced-casing-8"
  }, { name: "Skeletal Density 6",
    attribute: "Internal Structure",
    value: "3.1",
    leftChildId: "reinforced-casing-8"
  }, { name: "Skeletal Density 7",
    attribute: "Internal Structure",
    value: "3.1"
  }, { name: "Reinforced Casing 6",
    attribute: "Crit Chance (Received)",
    value: "1",
    leftChildId: "armor-hardening-6",
    centerChildId: "skeletal-density-9"
  }, { name: "Reinforced Casing 8",
    attribute: "Crit Chance (Received)",
    value: "1",
    centerChildId: "skeletal-density-10",
    rightChildId: "skeletal-density-8"
  }, { name: "Armor Hardening 6",
    attribute: "Armor",
    value: "1.6",
    rightChildId: "skeletal-density-9"
  }, { name: "Skeletal Density 8",
    attribute: "Internal Structure",
    value: "3.1",
    leftChildId: "skeletal-density-10"
  }, { name: "Skeletal Density 9",
    attribute: "Internal Structure",
    value: "3.1",
    leftChildId: "armor-hardening-7",
    rightChildId: "shock-absorbance-5"
  }, { name: "Skeletal Density 10",
    attribute: "Internal Structure",
    value: "3.1",
    leftChildId: "shock-absorbance-5",
    rightChildId: "armor-hardening-8"
  }, { name: "Armor Hardening 7",
    attribute: "Armor",
    value: "1.6"
  }, { name: "Shock Absorbance 5",
    attribute: "Fall Damage",
    value: "10",
    leftChildId: "armor-hardening-9",
    rightChildId: "armor-hardening-10"
  }, { name: "Armor Hardening 8",
    attribute: "Armor",
    value: "1.6"
  }, { name: "Armor Hardening 9",
    attribute: "Armor",
    value: "1.6"
  }, { name: "Armor Hardening 10",
    attribute: "Armor",
    value: "1.6"
  }]
},
/*
==========================================
                  MOBiLITY
==========================================
*/
{
  name: 'Mobility',
  nodes: [{ name: "Kinetic Burst 1",
    attribute: "Acceleration",
    value: "3.5",
    leftChildId: "torso-yaw-1",
    rightChildId: "hard-brake-1"
  }, { name: "Torso Yaw 1",
    attribute: "Max Torso Twist",
    value: "2",
    leftChildId: "hard-brake-2",
    rightChildId: "kinetic-burst-2"
  }, { name: "Hard Brake 1",
    attribute: "Deceleration",
    value: "3.5",
    leftChildId: "kinetic-burst-2",
    rightChildId: "torso-yaw-2"
  }, { name: "Hard Brake 2",
    attribute: "Deceleration",
    value: "3.5",
    leftChildId: "torso-speed-1",
    rightChildId: "torso-yaw-3"
  }, { name: "Kinetic Burst 2",
    attribute: "Acceleration",
    value: "3.5",
    leftChildId: "torso-yaw-3",
    rightChildId: "hard-brake-3"
  }, { name: "Torso Yaw 2",
    attribute: "Max Torso Twist",
    value: "2",
    leftChildId: "hard-brake-3",
    rightChildId: "anchor-turn-1"
  }, { name: "Torso Speed 1",
    attribute: "Torso Twist Speed",
    value: "3.5"
  }, { name: "Torso Yaw 3",
    attribute: "Max Torso Twist",
    value: "2",
    leftChildId: "kinetic-burst-3",
    centerChildId: "torso-yaw-4"
  }, { name: "Hard Brake 3",
    attribute: "Deceleration",
    value: "3.5",
    centerChildId: "kinetic-burst-5",
    rightChildId: "kinetic-burst-4"
  }, { name: "Anchor Turn 1",
    attribute: "Turn Speed",
    value: "5"
  }, { name: "Kinetic Burst 3",
    attribute: "Acceleration",
    value: "3.5",
    leftChildId: "hard-brake-4",
    rightChildId: "torso-yaw-4"
  }, { name: "Kinetic Burst 4",
    attribute: "Acceleration",
    value: "3.5",
    leftChildId: "kinetic-burst-5",
    rightChildId: "kinetic-burst-6"
  }, { name: "Hard Brake 4",
    attribute: "Deceleration",
    value: "3.5",
    leftChildId: "torso-speed-2",
    rightChildId: "torso-speed-3"
  }, { name: "Torso Yaw 4",
    attribute: "Max Torso Twist",
    value: "2",
    leftChildId: "torso-speed-3",
    rightChildId: "torso-pitch-1"
  }, { name: "Kinetic Burst 5",
    attribute: "Acceleration",
    value: "3.5",
    leftChildId: "torso-pitch-1",
    rightChildId: "kinetic-burst-7"
  }, { name: "Kinetic Burst 6",
    attribute: "Acceleration",
    value: "3.5",
    leftChildId: "kinetic-burst-7",
    rightChildId: "hard-brake-5"
  }, { name: "Torso Speed 2",
    attribute: "Torso Twist Speed",
    value: "3.5",
    rightChildId: "torso-yaw-5"
  }, { name: "Torso Speed 3",
    attribute: "Torso Twist Speed",
    value: "3.5",
    rightChildId: "torso-pitch-2"
  }, { name: "Torso Pitch 1",
    attribute: "Max Torso Inclination",
    value: "2",
    leftChildId: "torso-pitch-2",
    rightChildId: "torso-pitch-3"
  }, { name: "Kinetic Burst 7",
    attribute: "Acceleration",
    value: "3.5",
    leftChildId: "torso-pitch-3"
  }, { name: "Hard Brake 5",
    attribute: "Deceleration",
    value: "3.5",
    leftChildId: "anchor-turn-2"
  }, { name: "Torso Yaw 5",
    attribute: "Max Torso Twist",
    value: "2",
    rightChildId: "hard-brake-6"
  }, { name: "Torso Pitch 2",
    attribute: "Max Torso Inclination",
    value: "2",
    leftChildId: "hard-brake-6"
  }, { name: "Torso Pitch 3",
    attribute: "Max Torso Inclination",
    value: "2",
    rightChildId: "hard-brake-7"
  }, { name: "Anchor Turn 2",
    attribute: "Turn Speed",
    value: "5",
    leftChildId: "hard-brake-7"
  }, { name: "Hard Brake 6",
    attribute: "Deceleration",
    value: "3.5",
    leftChildId: "anchor-turn-3",
    rightChildId: "torso-speed-4"
  }, { name: "Hard Brake 7",
    attribute: "Deceleration",
    value: "3.5",
    leftChildId: "torso-speed-5",
    rightChildId: "anchor-turn-4"
  }, { name: "Anchor Turn 3",
    attribute: "Turn Speed",
    value: "5",
    rightChildId: "torso-pitch-4"
  }, { name: "Torso Speed 4",
    attribute: "Torso Twist Speed",
    value: "3.5",
    leftChildId: "torso-pitch-4"
  }, { name: "Torso Speed 5",
    attribute: "Torso Twist Speed",
    value: "3.5",
    rightChildId: "torso-pitch-5"
  }, { name: "Anchor Turn 4",
    attribute: "Turn Speed",
    value: "5",
    leftChildId: "torso-pitch-5"
  }, { name: "Torso Pitch 4",
    attribute: "Max Torso Inclination",
    value: "2",
    leftChildId: "speed-tweak-1",
    centerChildId: "torso-speed-6"
  }, { name: "Torso Pitch 5",
    attribute: "Max Torso Inclination",
    value: "2",
    centerChildId: "anchor-turn-5",
    rightChildId: "speed-tweak-2"
  }, { name: "Speed Tweak 1",
    attribute: "Max Speed",
    value: "1.5",
    rightChildId: "torso-speed-6"
  }, { name: "Speed Tweak 2",
    attribute: "Max Speed",
    value: "1.5",
    leftChildId: "anchor-turn-5"
  }, { name: "Torso Speed 6",
    attribute: "Torso Twist Speed",
    value: "3.5",
    rightChildId: "speed-tweak-3"
  }, { name: "Anchor Turn 5",
    attribute: "Turn Speed",
    value: "5",
    leftChildId: "speed-tweak-4"
  }, { name: "Speed Tweak 3",
    attribute: "Max Speed",
    value: "1.5",
    rightChildId: "speed-tweak-5"
  }, { name: "Speed Tweak 4",
    attribute: "Max Speed",
    value: "1.5",
    leftChildId: "speed-tweak-5"
  }, { name: "Speed Tweak 5",
    attribute: "Max Speed",
    value: "1.5"
  }]
},
/*
==========================================
                JUMP JETS
==========================================
*/
{
  name: "Jump Jets",
  nodes: [{ name: "Heat Shielding 1",
    attribute: "Jump Jet Heat Reduction",
    value: "6",
    leftChildId: "vent-calibration-1",
    rightChildId: "vectoring-1"
  }, { name: "Vent Calibration 1",
    attribute: "Jump Jet Burn Time",
    value: "3",
    centerChildId: "vent-calibration-2",
    rightChildId: "heat-shielding-2"
  }, { name: "Vectoring 1",
    attribute: "Jump Jet Forward Thrust",
    value: "25",
    leftChildId: "heat-shielding-2",
    centerChildId: "vectoring-2",
    rightChildId: "lift-speed-1"
  }, { name: "Heat Shielding 2",
    attribute: "Jump Jet Heat Reduction",
    value: "6",
    leftChildId: "vent-calibration-2",
    rightChildId: "vectoring-2"
  }, { name: "Lift Speed 1",
    attribute: "Jump Jet Initial Boost",
    value: "3",
    leftChildId: "vectoring-2"
  }, { name: "Vent Calibration 2",
    attribute: "Jump Jet Burn Time",
    value: "3",
    centerChildId: "vent-calibration-3",
    rightChildId: "heat-shielding-3"
  }, { name: "Vectoring 2",
    attribute: "Jump Jet Forward Thrust",
    value: "25",
    leftChildId: "heat-shielding-3",
    centerChildId: "vectoring-3",
    rightChildId: "lift-speed-2"
  }, { name: "Heat Shielding 3",
    attribute: "Jump Jet Heat Reduction",
    value: "6",
    leftChildId: "vent-calibration-3",
    rightChildId: "vectoring-3"
  }, { name: "Lift Speed 2",
    attribute: "Jump Jet Initial Boost",
    value: "3",
    leftChildId: "vectoring-3"
  }, { name: "Vent Calibration 3",
    attribute: "Jump Jet Burn Time",
    value: "3",
    leftChildId: "lift-speed-3",
    centerChildId: "vent-calibration-4",
    rightChildId: "heat-shielding-4"
  }, { name: "Vectoring 3",
    attribute: "Jump Jet Forward Thrust",
    value: "25",
    leftChildId: "heat-shielding-4",
    centerChildId: "vectoring-4"
  }, { name: "Lift Speed 3",
    attribute: "Jump Jet Initial Boost",
    value: "3",
    rightChildId: "vent-calibration-4"
  }, { name: "Heat Shielding 4",
    attribute: "Jump Jet Heat Reduction",
    value: "6",
    leftChildId: "vent-calibration-4",
    rightChildId: "vectoring-4"
  }, { name: "Vent Calibration 4",
    attribute: "Jump Jet Burn Time",
    value: "3",
    leftChildId: "lift-speed-4",
    centerChildId: "vent-calibration-5",
    rightChildId: "heat-shielding-5"
  }, { name: "Vectoring 4",
    attribute: "Jump Jet Forward Thrust",
    value: "25",
    leftChildId: "heat-shielding-5",
    centerChildId: "vectoring-5"
  }, { name: "Lift Speed 4",
    attribute: "Jump Jet Initial Boost",
    value: "3",
    rightChildId: "vent-calibration-5"
  }, { name: "Heat Shielding 5",
    attribute: "Jump Jet Heat Reduction",
    value: "6",
    leftChildId: "vent-calibration-5",
    rightChildId: "vectoring-5"
  }, { name: "Vent Calibration 5",
    attribute: "Jump Jet Burn Time",
    value: "3"
  }, { name: "Vectoring 5",
    attribute: "Jump Jet Forward Thrust",
    value: "25",
    leftChildId: "lift-speed-5"
  }, { name: "Lift Speed 5",
    attribute: "Jump Jet Initial Boost",
    value: "3"
  }]
},
/*
==========================================
               OPERATIONS
==========================================
*/
{
  name: "Operations",
  nodes: [{ name: "Quick Ignition 1",
    attribute: "Startup Speed",
    value: "7",
    leftChildId: "speed-retention-1",
    rightChildId: "improved-gyros-1"
  }, { name: "Speed Retention 1",
    attribute: "Legged Speed",
    value: "10",
    centerChildId: "hill-climb-1",
    rightChildId: "heat-containment-1"
  }, { name: "Improved Gyros 1",
    attribute: "Tastier Gyros",
    value: "17.5",
    leftChildId: "heat-containment-1",
    centerChildId: "improved-gyros-2"
  }, { name: "Heat Containment 1",
    attribute: "Heat Capacity",
    value: "3",
    leftChildId: "hill-climb-1",
    rightChildId: "improved-gyros-2"
  }, { name: "Hill Climb 1",
    attribute: "Hill Climb",
    value: "5",
    leftChildId: "heat-containment-2",
    centerChildId: "hill-climb-2"
  }, { name: "Improved Gyros 2",
    attribute: "Tastier Gyros",
    value: "17.5",
    centerChildId: "speed-retention-2",
    rightChildId: "heat-containment-3"
  }, { name: "Heat Containment 2",
    attribute: "Heat Capacity",
    value: "3",
    leftChildId: "cool-run-1",
    centerChildId: "quick-ignition-2"
  }, { name: "Heat Containment 3",
    attribute: "Heat Capacity",
    value: "3",
    centerChildId: "quick-ignition-3",
    rightChildId: "cool-run-2"
  }, { name: "Cool Run 1",
    attribute: "Heat Dissipation",
    value: "2",
    rightChildId: "quick-ignition-2"
  }, { name: "Hill Climb 2",
    attribute: "Hill Climb",
    value: "5",
    centerChildId: "hill-climb-3",
    rightChildId: "cool-run-3"
  }, { name: "Speed Retention 2",
    attribute: "Legged Speed",
    value: "10",
    leftChildId: "cool-run-3",
    centerChildId: "improved-gyros-3"
  }, { name: "Cool Run 2",
    attribute: "Heat Dissipation",
    value: "2",
    leftChildId: "quick-ignition-3"
  }, { name: "Quick Ignition 2",
    attribute: "Startup Speed",
    value: "7",
    rightChildId: "hill-climb-3"
  }, { name: "Cool Run 3",
    attribute: "Heat Dissipation",
    value: "2",
    leftChildId: "hill-climb-3",
    rightChildId: "improved-gyros-3"
  }, { name: "Quick Ignition 3",
    attribute: "Startup Speed",
    value: "7",
    leftChildId: "improved-gyros-3"
  }, { name: "Hill Climb 3",
    attribute: "Hill Climb",
    value: "5",
    leftChildId: "heat-containment-4",
    rightChildId: "quick-ignition-4"
  }, { name: "Improved Gyros 3",
    attribute: "Tastier Gyros",
    value: "17.5",
    leftChildId: "quick-ignition-4",
    rightChildId: "heat-containment-5"
  }, { name: "Heat Containment 4",
    attribute: "Heat Capacity",
    value: "3"
  }, { name: "Quick Ignition 4",
    attribute: "Startup Speed",
    value: "7",
    leftChildId: "improved-gyros-4",
    rightChildId: "speed-retention-3"
  }, { name: "Heat Containment 5",
    attribute: "Heat Capacity",
    value: "3"
  }, { name: "Improved Gyros 4",
    attribute: "Tastier Gyros",
    value: "17.5",
    rightChildId: "quick-ignition-5"
  }, { name: "Speed Retention 3",
    attribute: "Legged Speed",
    value: "10",
    leftChildId: "quick-ignition-5"
  }, { name: "Quick Ignition 5",
    attribute: "Startup Speed",
    value: "7",
    leftChildId: "cool-run-4",
    rightChildId: "cool-run-5"
  }, { name: "Cool Run 4",
    attribute: "Heat Dissipation",
    value: "2"
  }, { name: "Cool Run 5",
    attribute: "Heat Dissipation",
    value: "2"
  }]
},
/*
==========================================
                 SENSORS
==========================================
*/
{
  name: "Sensors",
  nodes: [{ name: "Target Info Gathering 1",
    attribute: "Target Info Speed",
    value: "7",
    leftChildId: "target-decay-1",
    rightChildId: "sensor-range-1"
  }, { name: "Target Decay 1",
    attribute: "Target Lock Decay",
    value: "0.7",
    leftChildId: "target-retention-1",
    centerChildId: "target-info-gathering-3",
    rightChildId: "sensor-range-2"
  }, { name: "Sensor Range 1",
    attribute: "Sensor Range",
    value: "7",
    leftChildId: "sensor-range-2",
    centerChildId: "sensor-range-3",
    rightChildId: "target-info-gathering-2"
  }, { name: "Target Retention 1",
    attribute: "Target Retention",
    value: "200"
  }, { name: "Sensor Range 2",
    attribute: "Sensor Range",
    value: "7",
    leftChildId: "target-info-gathering-3",
    rightChildId: "sensor-range-3"
  }, { name: "Target Info Gathering 2",
    attribute: "Target Info Speed",
    value: "7",
    rightChildId: "advanced-zoom"
  }, { name: "Target Info Gathering 3",
    attribute: "Target Info Speed",
    value: "7",
    centerChildId: "target-info-gathering-4",
    rightChildId: "target-decay-2"
  }, { name: "Sensor Range 3",
    attribute: "Sensor Range",
    value: "7",
    leftChildId: "target-decay-2",
    centerChildId: "target-retention-2"
  }, { name: "Advanced Zoom",
    attribute: "Zoom Magnifier",
    value: "1"
  }, { name: "Target Decay 2",
    attribute: "Target Lock Decay",
    value: "0.7"
  }, { name: "Target Info Gathering 4",
    attribute: "Target Info Speed",
    value: "7",
    leftChildId: "radar-deprivation-1",
    centerChildId: "sensor-range-4"
  }, { name: "Target Retention 2",
    attribute: "Target Retention",
    value: "200",
    centerChildId: "sensor-range-5",
    rightChildId: "target-decay-3"
  }, { name: "Radar Deprivation 1",
    attribute: "Radar Deprivation",
    value: "20"
  }, { name: "Target Decay 3",
    attribute: "Target Lock Decay",
    value: "0.7",
    rightChildId: "seismic-sensor-1"
  }, { name: "Sensor Range 4",
    attribute: "Sensor Range",
    value: "7",
    leftChildId: "radar-deprivation-2",
    centerChildId: "target-info-gathering-5",
    rightChildId: "target-decay-4"
  }, { name: "Sensor Range 5",
    attribute: "Sensor Range",
    value: "7",
    leftChildId: "target-decay-4",
    centerChildId: "target-decay-5",
    rightChildId: "radar-deprivation-3"
  }, { name: "Seismic Sensor 1",
    attribute: "Seismic Sensor",
    value: "100"
  }, { name: "Radar Deprivation 2",
    attribute: "Radar Deprivation",
    value: "20",
    leftChildId: "enhanced-ecm-1"
  }, { name: "Target Decay 4",
    attribute: "Target Lock Decay",
    value: "0.7"
  }, { name: "Radar Deprivation 3",
    attribute: "Radar Deprivation",
    value: "20",
    rightChildId: "enhanced-ecm-2"
  }, { name: "Enhanced ECM 1",
    attribute: "ECM Range",
    value: "22.5"
  }, { name: "Target Info Gathering 5",
    attribute: "Target Info Speed",
    value: "7",
    leftChildId: "seismic-sensor-2",
    rightChildId: "radar-deprivation-4"
  }, { name: "Target Decay 5",
    attribute: "Target Lock Decay",
    value: "0.7",
    rightChildId: "radar-deprivation-5"
  }, { name: "Enhanced ECM 2",
    attribute: "ECM Range",
    value: "22.5"
  }, { name: "Seismic Sensor 2",
    attribute: "Seismic Sensor",
    value: "100"
  }, { name: "Radar Deprivation 4",
    attribute: "Radar Deprivation",
    value: "20"
  }, { name: "Radar Deprivation 5",
    attribute: "Radar Deprivation",
    value: "20"
  }]
},
/*
==========================================
                AUXILIARY
==========================================
*/
{
  name: "Auxiliary",
  nodes: [{ name: "Consumable Slot 1",
    attribute: "Consumable Slots",
    value: "1",
    leftChildId: "uav-duration",
    rightChildId: "adv.-salvos-1"
  }, { name: "UAV Duration",
    attribute: "UAV Duration",
    value: "10",
    leftChildId: "uav-range-1",
    centerChildId: "capture-assist-1",
    rightChildId: "enhanced-coolshot-1"
  }, { name: "ADV. Salvos 1",
    attribute: "Artillery Strike Duration",
    value: "25",
    leftChildId: "enhanced-coolshot-1",
    centerChildId: "capture-assist-2",
    rightChildId: "adv.-salvos-2"
  }, { name: "UAV Range 1",
    attribute: "UAV Sight Range",
    value: "20",
    leftChildId: "extra-uav",
    centerChildId: "enhanced-narc-1"
  }, { name: "Enhanced Coolshot 1",
    attribute: "Coolshot Effectiveness",
    value: "25",
    leftChildId: "capture-assist-1",
    centerChildId: "enhanced-coolshot-2",
    rightChildId: "capture-assist-2"
  }, { name: "ADV. Salvos 2",
    attribute: "Artillery Strike Duration",
    value: "25",
    centerChildId: "enhanced-narc-2",
    rightChildId: "expanded-reserves"
  }, { name: "Extra UAV",
    attribute: "UAV Capacity",
    value: "1",
    leftChildId: "uav-range-2",
    centerChildId: "consumable-slot-2"
  }, { name: "Capture Assist 1",
    attribute: "Point Capture Speed",
    value: "5",
    leftChildId: "enhanced-narc-1",
    centerChildId: "capture-assist-3",
    rightChildId: "enhanced-coolshot-2"
  }, { name: "Capture Assist 2",
    attribute: "Point Capture Speed",
    value: "5",
    leftChildId: "enhanced-coolshot-2",
    centerChildId: "capture-assist-4",
    rightChildId: "enhanced-narc-2"
  }, { name: "Expanded Reserves",
    attribute: "Additional Air/Arty Strike",
    value: "1",
    centerChildId: "consumable-slot-3",
    rightChildId: "enhanced-spotting"
  }, { name: "UAV Range 2",
    attribute: "UAV Sight Range",
    value: "20"
  }, { name: "Enhanced NARC 1",
    attribute: "NARC Velocity and Duration",
    value: "10",
    rightChildId: "capture-assist-3"
  }, { name: "Enhanced Coolshot 2",
    attribute: "Coolshot Effectiveness",
    value: "25",
    leftChildId: "capture-assist-3",
    centerChildId: "coolant-reserves",
    rightChildId: "capture-assist-4"
  }, { name: "Enhanced NARC 2",
    attribute: "NARC Velocity and Duration",
    value: "10",
    leftChildId: "capture-assist-4"
  }, { name: "Enhanced Spotting",
    attribute: "Air/Arty Strike Accuracy",
    value: "20"
  }, { name: "Consumable Slot 2",
    attribute: "Additional Consumable Slot",
    value: "1"
  }, { name: "Capture Assist 3",
    attribute: "Rate of Capture",
    value: "5"
  }, { name: "Capture Assist 4",
    attribute: "Rate of Capture",
    value: "5"
  }, { name: "Consumable Slot 3",
    attribute: "Additional Consumable Slot",
    value: "1"
  }, { name: "Coolant Reserves",
    attribute: "Coolant Reserves",
    value: "1",
    leftChildId: "coolshot-cooldown",
    rightChildId: "consumable-slot-4"
  }, { name: "Coolshot Cooldown",
    attribute: "Coolshot Cooldown",
    value: "25"
  }, { name: "Consumable Slot 4",
    attribute: "Additional Consumable Slot",
    value: "1"
  }]
}];

var attributeTemplateMap = [{ attribute: "Weapon Range",
  template: "+{}%"
}, { attribute: "Laser Duration",
  template: "-{}%"
}, { attribute: "Weapon Velocity",
  template: "+{}%"
}, { attribute: "Weapon Cooldown",
  template: "-{}%"
}, { attribute: "Missile Crit Damage",
  template: "+{}%"
}, { attribute: "Gauss Held Time",
  template: "+{} sec."
}, { attribute: "Armor",
  template: "+{}%"
}, { attribute: "AMS Effectiveness",
  template: "+{}%"
}, { attribute: "Weapon Heat Gen",
  template: "-{}%"
}, { attribute: "Ballistic Ammo",
  template: "+{}"
}, { attribute: "Missile Ammo",
  template: "+{}"
}, { attribute: "Missile Spread",
  template: "+{}%"
}, { attribute: "LBX Spread",
  template: "-{}%"
}, { attribute: "Fall Damage",
  template: "-{}%"
}, { attribute: "UAC Jam Chance",
  template: "-{}%"
}, { attribute: "Crit Chance (Received)",
  template: "-{}%"
}, { attribute: "Internal Structure",
  template: "+{}%"
}, { attribute: "Acceleration",
  template: "+{}%"
}, { attribute: "Deceleration",
  template: "+{}%"
}, { attribute: "Max Torso Inclination",
  template: "+{}%"
}, { attribute: "Max Arm Inclination",
  template: "+{}%"
}, { attribute: "Torso Twist Speed",
  template: "+{}%"
}, { attribute: "Max Torso Twist",
  template: "+{}%"
}, { attribute: "Turn Speed",
  template: "+{}%"
}, { attribute: "Max Speed",
  template: "+{}%"
}, { attribute: "Jump Jet Heat Reduction",
  template: "-{}%"
}, { attribute: "Jump Jet Initial Boost",
  template: "+{}%"
}, { attribute: "Jump Jet Forward Thrust",
  template: "+{}%"
}, { attribute: "Jump Jet Burn Time",
  template: "+{}%"
}, { attribute: "Tastier Gyros",
  template: "-{}%"
}, { attribute: "Startup Speed",
  template: "-{}%"
}, { attribute: "Legged Speed",
  template: "+{}%"
}, { attribute: "Heat Capacity",
  template: "+{}%"
}, { attribute: "Hill Climb",
  template: "+{}%"
}, { attribute: "Heat Dissipation",
  template: "+{}%"
}, { attribute: "Target Info Speed",
  template: "+{}%"
}, { attribute: "Target Retention",
  template: "+{} m."
}, { attribute: "Sensor Range",
  template: "+{}%"
}, { attribute: "Target Lock Decay",
  template: "+{} sec."
}, { attribute: "Zoom Magnifier",
  template: "+{}"
}, { attribute: "Radar Deprivation",
  template: "+{}%"
}, { attribute: "Seismic Sensor",
  template: "{} m."
}, { attribute: "ECM Range",
  template: "+{}%"
}, { attribute: "Consumable Slots",
  template: "+{}"
}, { attribute: "UAV Duration",
  template: "+{} sec."
}, { attribute: "UAV Sight Range",
  template: "+{}%"
}, { attribute: "Artillery Strike Duration",
  template: "+{}%"
}, { attribute: "Coolshot Effectiveness",
  template: "+{}%"
}, { attribute: "UAV Capacity",
  template: "+{}"
}, { attribute: "Point Capture Speed",
  template: "+{}%"
}, { attribute: "NARC Velocity and Duration",
  template: "+{}%"
}, { attribute: "Additional Air/Arty Strike",
  template: "+{}"
}, { attribute: "Air/Arty Strike Accuracy",
  template: "-{}%"
}, { attribute: "Additional Consumable Slot",
  template: "+{}"
}, { attribute: "Rate of Capture",
  template: "+{}%"
}, { attribute: "Coolant Reserves",
  template: "+{}"
}, { attribute: "Coolshot Cooldown",
  template: "-{}%"
}];

document.addEventListener("DOMContentLoaded", function () {

  var maxSkillNodes = 91;
  var cbillsPerNode = 60000;
  var xpPerNode = 800;

  var SkillTree = function () {

    var activeTreeName = treeSource[0].name;
    var skillTrees = buildSkillTrees(treeSource);

    function buildSkillTrees(treeSource$$1) {
      var skillTrees = [];
      var _iteratorNormalCompletion = true;
      var _didIteratorError = false;
      var _iteratorError = undefined;

      try {
        for (var _iterator = treeSource$$1[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
          var treeDef = _step.value;

          var skillTree = {};
          skillTree.name = treeDef.name;
          skillTree.nodes = [];
          var _iteratorNormalCompletion2 = true;
          var _didIteratorError2 = false;
          var _iteratorError2 = undefined;

          try {
            for (var _iterator2 = treeDef.nodes[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
              var nodeDef = _step2.value;

              skillTree.nodes.push(new Node(nodeDef.name, nodeDef.attribute, parseFloat(nodeDef.value), nodeDef.valueTemplate, nodeNameToId(nodeDef.name), nodeDef.leftChildId, nodeDef.centerChildId, nodeDef.rightChildId));
            }
          } catch (err) {
            _didIteratorError2 = true;
            _iteratorError2 = err;
          } finally {
            try {
              if (!_iteratorNormalCompletion2 && _iterator2.return) {
                _iterator2.return();
              }
            } finally {
              if (_didIteratorError2) {
                throw _iteratorError2;
              }
            }
          }

          skillTrees.push(skillTree);
        }
      } catch (err) {
        _didIteratorError = true;
        _iteratorError = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion && _iterator.return) {
            _iterator.return();
          }
        } finally {
          if (_didIteratorError) {
            throw _iteratorError;
          }
        }
      }

      return skillTrees;
    }

    function setActiveTreeName(newName) {
      activeTreeName = newName;
    }

    function getActiveTreeName() {
      return activeTreeName;
    }

    function getTree(treeName) {
      var _iteratorNormalCompletion3 = true;
      var _didIteratorError3 = false;
      var _iteratorError3 = undefined;

      try {
        for (var _iterator3 = trees[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {
          var tree = _step3.value;

          if (tree.name = treeName) {
            return tree;
          }
        }
      } catch (err) {
        _didIteratorError3 = true;
        _iteratorError3 = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion3 && _iterator3.return) {
            _iterator3.return();
          }
        } finally {
          if (_didIteratorError3) {
            throw _iteratorError3;
          }
        }
      }
    }

    function getTrees() {
      return skillTrees;
    }

    function getTree(treeName) {
      if (treeName == undefined) {
        return getTree(activeTreeName);
      } else {
        var _iteratorNormalCompletion4 = true;
        var _didIteratorError4 = false;
        var _iteratorError4 = undefined;

        try {
          for (var _iterator4 = skillTrees[Symbol.iterator](), _step4; !(_iteratorNormalCompletion4 = (_step4 = _iterator4.next()).done); _iteratorNormalCompletion4 = true) {
            var tree = _step4.value;

            if (tree.name == treeName) {
              return tree;
            }
          }
        } catch (err) {
          _didIteratorError4 = true;
          _iteratorError4 = err;
        } finally {
          try {
            if (!_iteratorNormalCompletion4 && _iterator4.return) {
              _iterator4.return();
            }
          } finally {
            if (_didIteratorError4) {
              throw _iteratorError4;
            }
          }
        }
      }
    }

    function getNode(nodeId) {
      var _iteratorNormalCompletion5 = true;
      var _didIteratorError5 = false;
      var _iteratorError5 = undefined;

      try {
        for (var _iterator5 = skillTrees[Symbol.iterator](), _step5; !(_iteratorNormalCompletion5 = (_step5 = _iterator5.next()).done); _iteratorNormalCompletion5 = true) {
          var tree = _step5.value;
          var _iteratorNormalCompletion6 = true;
          var _didIteratorError6 = false;
          var _iteratorError6 = undefined;

          try {
            for (var _iterator6 = tree.nodes[Symbol.iterator](), _step6; !(_iteratorNormalCompletion6 = (_step6 = _iterator6.next()).done); _iteratorNormalCompletion6 = true) {
              var node = _step6.value;

              if (node.id == nodeId) {
                return node;
              }
            }
          } catch (err) {
            _didIteratorError6 = true;
            _iteratorError6 = err;
          } finally {
            try {
              if (!_iteratorNormalCompletion6 && _iterator6.return) {
                _iterator6.return();
              }
            } finally {
              if (_didIteratorError6) {
                throw _iteratorError6;
              }
            }
          }
        }
      } catch (err) {
        _didIteratorError5 = true;
        _iteratorError5 = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion5 && _iterator5.return) {
            _iterator5.return();
          }
        } finally {
          if (_didIteratorError5) {
            throw _iteratorError5;
          }
        }
      }
    }

    function getNodeCount(treeName) {
      var nodeCount = 0;
      if (treeName != undefined) {
        return getTree(treeName).nodes.length;
      } else {
        var _iteratorNormalCompletion7 = true;
        var _didIteratorError7 = false;
        var _iteratorError7 = undefined;

        try {
          for (var _iterator7 = skillTrees[Symbol.iterator](), _step7; !(_iteratorNormalCompletion7 = (_step7 = _iterator7.next()).done); _iteratorNormalCompletion7 = true) {
            var tree = _step7.value;

            nodeCount = getNodeCount(tree.name);
          }
        } catch (err) {
          _didIteratorError7 = true;
          _iteratorError7 = err;
        } finally {
          try {
            if (!_iteratorNormalCompletion7 && _iterator7.return) {
              _iterator7.return();
            }
          } finally {
            if (_didIteratorError7) {
              throw _iteratorError7;
            }
          }
        }
      }
      return nodeCount;
    }

    function getSelectedNodes(treeName) {
      var selectedNodes = [];

      if (treeName != undefined) {
        var _iteratorNormalCompletion8 = true;
        var _didIteratorError8 = false;
        var _iteratorError8 = undefined;

        try {
          for (var _iterator8 = getTree(treeName).nodes[Symbol.iterator](), _step8; !(_iteratorNormalCompletion8 = (_step8 = _iterator8.next()).done); _iteratorNormalCompletion8 = true) {
            var node = _step8.value;

            if (node.selected) {
              selectedNodes.push(node);
            }
          }
        } catch (err) {
          _didIteratorError8 = true;
          _iteratorError8 = err;
        } finally {
          try {
            if (!_iteratorNormalCompletion8 && _iterator8.return) {
              _iterator8.return();
            }
          } finally {
            if (_didIteratorError8) {
              throw _iteratorError8;
            }
          }
        }
      } else {
        var _iteratorNormalCompletion9 = true;
        var _didIteratorError9 = false;
        var _iteratorError9 = undefined;

        try {
          for (var _iterator9 = skillTrees[Symbol.iterator](), _step9; !(_iteratorNormalCompletion9 = (_step9 = _iterator9.next()).done); _iteratorNormalCompletion9 = true) {
            var skillTree = _step9.value;

            selectedNodes = selectedNodes.concat(getSelectedNodes(skillTree.name));
          }
        } catch (err) {
          _didIteratorError9 = true;
          _iteratorError9 = err;
        } finally {
          try {
            if (!_iteratorNormalCompletion9 && _iterator9.return) {
              _iterator9.return();
            }
          } finally {
            if (_didIteratorError9) {
              throw _iteratorError9;
            }
          }
        }
      }
      return selectedNodes;
    }

    function childrenOf(node) {
      var childNodes = [];
      pushIfDefined(childNodes, getNode(node.leftChildId));
      pushIfDefined(childNodes, getNode(node.centerChildId));
      pushIfDefined(childNodes, getNode(node.rightChildId));
      return childNodes;
    }

    function parentsOf(node) {
      var parentNodes = [];
      var _iteratorNormalCompletion10 = true;
      var _didIteratorError10 = false;
      var _iteratorError10 = undefined;

      try {
        for (var _iterator10 = skillTrees[Symbol.iterator](), _step10; !(_iteratorNormalCompletion10 = (_step10 = _iterator10.next()).done); _iteratorNormalCompletion10 = true) {
          var tree = _step10.value;
          var _iteratorNormalCompletion11 = true;
          var _didIteratorError11 = false;
          var _iteratorError11 = undefined;

          try {
            for (var _iterator11 = tree.nodes[Symbol.iterator](), _step11; !(_iteratorNormalCompletion11 = (_step11 = _iterator11.next()).done); _iteratorNormalCompletion11 = true) {
              var potentialParent = _step11.value;

              if (potentialParent.leftChildId == node.id || potentialParent.centerChildId == node.id || potentialParent.rightChildId == node.id) {
                parentNodes.push(potentialParent);
              }
            }
          } catch (err) {
            _didIteratorError11 = true;
            _iteratorError11 = err;
          } finally {
            try {
              if (!_iteratorNormalCompletion11 && _iterator11.return) {
                _iterator11.return();
              }
            } finally {
              if (_didIteratorError11) {
                throw _iteratorError11;
              }
            }
          }
        }
      } catch (err) {
        _didIteratorError10 = true;
        _iteratorError10 = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion10 && _iterator10.return) {
            _iterator10.return();
          }
        } finally {
          if (_didIteratorError10) {
            throw _iteratorError10;
          }
        }
      }

      return parentNodes;
    }

    function pushIfDefined(collection, node) {
      if (node !== undefined) {
        collection.push(node);
      }
    }

    // public interface
    return {
      getActiveTreeName: getActiveTreeName,
      setActiveTreeName: setActiveTreeName,
      getTree: getTree,
      getTrees: getTrees,
      getNode: getNode,
      getNodeCount: getNodeCount,
      getSelectedNodes: getSelectedNodes,
      parentsOf: parentsOf,
      childrenOf: childrenOf
    };
  }();

  function Node(newName, newAttribute, newValue, newValueTemplate, newId, newLeftChildId, newCenterChildId, newRightCenterChildId) {
    var selected = false;

    this.name = newName;
    this.attribute = newAttribute;
    this.value = newValue;
    this.valueTemplate = newValueTemplate;
    this.id = newId;

    this.leftChildId = newLeftChildId, this.centerChildId = newCenterChildId, this.rightChildId = newRightCenterChildId, this.parents = function () {
      return SkillTree.parentsOf(this);
    };
    this.children = function () {
      return SkillTree.childrenOf(this);
    };
    this.selected = selected;
  }

  function buildUI(trees) {
    trees.forEach(function (tree, index) {
      buildTab(tree, index);
      buildTreeDisplay(tree);
    });
    updateNodeCounters();
    document.getElementById("node-total").textContent = maxSkillNodes;
    document.getElementById(trees[0].name.toLowerCase() + "-tab").click();
  }

  buildUI(SkillTree.getTrees());

  function buildTab(tree, index) {
    var tabHeight = 40; // matches element height defined in planner.css
    var topOffset = 50;
    var tabElement = document.createElement("div");
    tabElement.id = stringToCss(tree.name + "-tab");
    tabElement.classList.add("tab");
    tabElement.style.top = 40 * index + 55 + "px";
    tabElement.textContent = tree.name;

    var counterElement = document.createElement("div");
    counterElement.id = tree.name.toLowerCase() + "-tab-counter";
    counterElement.classList.add("tab-counter");
    counterElement.textContent = "0 / " + SkillTree.getNodeCount(tree.name);
    tabElement.appendChild(counterElement);

    tabElement.addEventListener("click", function () {
      changeSkillTree(tree.name);
    });

    document.getElementById("total-nodes-display").after(tabElement);
  }

  function buildTreeDisplay(tree) {
    var treeElement = document.createElement("div");
    treeElement.id = treeNameToId(tree.name);
    treeElement.classList.add("skill-tree");
    treeElement.classList.add("hide");
    document.getElementById("graph-view").appendChild(treeElement);

    // TODO: need to do something here to sort the node array.  Probably search it each
    // time you add a node and add the children of that node to a queue to be the next loaded

    var xOffset = 65;
    var yOffset = 38;
    var leftmostNodeElement = 0;
    var rightmostNodeElement = 0;

    var _iteratorNormalCompletion12 = true;
    var _didIteratorError12 = false;
    var _iteratorError12 = undefined;

    try {
      var _loop = function _loop() {
        var node = _step12.value;


        var nodeFrameElement = buildNodeElement(node);

        // the first element in nodes is the root node, so it starts available
        if (node == tree.nodes[0]) nodeFrameElement.querySelectorAll(".node-element").forEach(function (element) {
          element.classList.add("available");
        });else {
          nodeFrameElement.querySelectorAll(".node-element").forEach(function (element) {
            element.classList.add("unavailable");
          });
        }

        var parent = node.parents()[0];
        if (parent != undefined) {
          var relativeChildPostiion = getRelativeChildPosition(parent, node.id);
          var parentElement = document.getElementById(parent.id);

          var parentTop = dimensionAsNumber(parentElement.style.top);
          var parentLeft = dimensionAsNumber(parentElement.style.left);
          if (relativeChildPostiion == "left") {
            nodeFrameElement.style.top = parentTop + yOffset + "px";
            nodeFrameElement.style.left = parentLeft - xOffset + "px";
          } else if (relativeChildPostiion == "right") {
            nodeFrameElement.style.top = parentTop + yOffset + "px";
            nodeFrameElement.style.left = parentLeft + xOffset + "px";
          } else {
            nodeFrameElement.style.top = parentTop + yOffset * 2 + "px";
            nodeFrameElement.style.left = parentLeft + "px";
          }
        } else {
          nodeFrameElement.style.top = "25px";
          nodeFrameElement.style.left = "26px";
        }

        var leftPosition = dimensionAsNumber(nodeFrameElement.style.left);
        if (leftPosition < leftmostNodeElement) {
          leftmostNodeElement = leftPosition;
        }
        if (leftPosition > rightmostNodeElement) {
          rightmostNodeElement = leftPosition;
        }

        treeElement.appendChild(nodeFrameElement);

        nodeFrameElement.addEventListener("click", function () {
          nodeClicked(node);
        });
      };

      for (var _iterator12 = tree.nodes[Symbol.iterator](), _step12; !(_iteratorNormalCompletion12 = (_step12 = _iterator12.next()).done); _iteratorNormalCompletion12 = true) {
        _loop();
      }
    } catch (err) {
      _didIteratorError12 = true;
      _iteratorError12 = err;
    } finally {
      try {
        if (!_iteratorNormalCompletion12 && _iterator12.return) {
          _iterator12.return();
        }
      } finally {
        if (_didIteratorError12) {
          throw _iteratorError12;
        }
      }
    }

    var nodeWidth = 52; // width of a graph node, per planner.css
    var padding = 25; // "padding" here rather than in css because "absolute" positioning of the
    // node elements throws off alignment of css padding
    var treeWidth = rightmostNodeElement - leftmostNodeElement + nodeWidth + padding * 2;
    treeElement.style.width = treeWidth + "px";
    document.getElementById(treeNameToId(tree.name)).querySelectorAll(".graph-node").forEach(function (el) {
      var newLeft = dimensionAsNumber(el.style.left) + -leftmostNodeElement + padding + "px";
      el.style.left = newLeft;
    });

    var _iteratorNormalCompletion13 = true;
    var _didIteratorError13 = false;
    var _iteratorError13 = undefined;

    try {
      for (var _iterator13 = tree.nodes[Symbol.iterator](), _step13; !(_iteratorNormalCompletion13 = (_step13 = _iterator13.next()).done); _iteratorNormalCompletion13 = true) {
        var _node = _step13.value;

        var parentElement = document.getElementById(_node.id);
        if (_node.leftChildId != undefined) {
          var leftChildElement = document.getElementById(_node.leftChildId);
          if (leftChildElement == null) {
            console.log("left child id results in null = " + _node.leftChildId + " for parent " + parentElement.id);
          } else {
            drawLineBetweenNodes(parentElement, leftChildElement, treeElement);
          }
        }
        if (_node.centerChildId != undefined) {
          var centerChildElement = document.getElementById(_node.centerChildId);
          if (centerChildElement == null) {
            console.log("center child id results in null = " + _node.centerChildId + " for parent " + parentElement.id);
          } else {
            drawLineBetweenNodes(parentElement, centerChildElement, treeElement);
          }
        }
        if (_node.rightChildId != undefined) {
          var rightChildElement = document.getElementById(_node.rightChildId);
          if (rightChildElement == null) {
            console.log("right child id results in null = " + _node.rightChildId + " for parent " + parentElement.id);
          } else {
            drawLineBetweenNodes(parentElement, rightChildElement, treeElement);
          }
        }
      }
    } catch (err) {
      _didIteratorError13 = true;
      _iteratorError13 = err;
    } finally {
      try {
        if (!_iteratorNormalCompletion13 && _iterator13.return) {
          _iterator13.return();
        }
      } finally {
        if (_didIteratorError13) {
          throw _iteratorError13;
        }
      }
    }
  }

  function buildNodeElement(node) {
    var nodeFrameElement = document.createElement("div");
    var hexTopElement = document.createElement("div");
    var nodeTextElement = document.createElement("div");
    var nodeValueElement = document.createElement("div");
    var hexBottomElement = document.createElement("div");

    nodeFrameElement.classList.add("node-element");
    hexTopElement.classList.add("node-element");
    nodeTextElement.classList.add("node-element");
    nodeValueElement.classList.add("node-element");
    hexBottomElement.classList.add("node-element");

    nodeFrameElement.classList.add("graph-node");
    nodeFrameElement.id = node.id;

    hexTopElement.classList.add("hex-top");
    hexTopElement.classList.add("hex-component");
    nodeTextElement.classList.add("hex-text");
    nodeValueElement.classList.add("hex-text");
    nodeValueElement.classList.add("hex-value");
    hexBottomElement.classList.add("hex-bottom");
    hexBottomElement.classList.add("hex-component");

    nodeTextElement.textContent = node.name;
    nodeValueElement.textContent = getValueTemplate(node.attribute)[0] + node.value + getValueTemplate(node.attribute)[1];

    nodeFrameElement.append(hexTopElement);
    nodeFrameElement.append(nodeTextElement);
    nodeFrameElement.append(nodeValueElement);
    nodeFrameElement.append(hexBottomElement);

    return nodeFrameElement;
  }

  function drawLineBetweenNodes(parentElement, childElement, treeElement) {
    var lineElement = document.createElement("div");
    lineElement.classList.add("node-connect-line");

    var parentX = dimensionAsNumber(parentElement.style.left);
    var parentY = dimensionAsNumber(parentElement.style.top);
    var childX = dimensionAsNumber(childElement.style.left);
    var childY = dimensionAsNumber(childElement.style.top);

    lineElement.style.width = childY - parentY + 15 + "px";

    var midX = (parentX + childX) / 2;
    var midY = (parentY + childY) / 2;

    var angle = Math.atan2(parentY - childY, parentX - childX) * 180 / Math.PI + 180;
    var transform = "rotate(" + angle + "deg)";

    lineElement.style.transform = transform;
    lineElement.style.top = parentY + 26 + "px";
    lineElement.style.left = parentX + 26 + "px";

    treeElement.appendChild(lineElement);
  }

  function getRelativeChildPosition(parent, childId) {
    if (parent.leftChildId == childId) {
      return "left";
    } else if (parent.centerChildId == childId) {
      return "center";
    } else if (parent.rightChildId == childId) {
      return "right";
    }
    return "child not found in getRelativeChildPosition()";
  }

  function nodeClicked(node) {
    if (node.selected) {
      attemptNodeDeselection(node);
    } else {
      if (nodeAvailableForSelection(node) && SkillTree.getSelectedNodes().length < maxSkillNodes) {
        node.selected = true;
        updateNodeColor(node);
      }
    }
    updateNodeColors(SkillTree.getActiveTreeName());

    updateNodeColor(node);
    var _iteratorNormalCompletion14 = true;
    var _didIteratorError14 = false;
    var _iteratorError14 = undefined;

    try {
      for (var _iterator14 = node.children()[Symbol.iterator](), _step14; !(_iteratorNormalCompletion14 = (_step14 = _iterator14.next()).done); _iteratorNormalCompletion14 = true) {
        var child = _step14.value;

        updateNodeColor(child);
      }
    } catch (err) {
      _didIteratorError14 = true;
      _iteratorError14 = err;
    } finally {
      try {
        if (!_iteratorNormalCompletion14 && _iterator14.return) {
          _iterator14.return();
        }
      } finally {
        if (_didIteratorError14) {
          throw _iteratorError14;
        }
      }
    }

    var _iteratorNormalCompletion15 = true;
    var _didIteratorError15 = false;
    var _iteratorError15 = undefined;

    try {
      for (var _iterator15 = node.parents()[Symbol.iterator](), _step15; !(_iteratorNormalCompletion15 = (_step15 = _iterator15.next()).done); _iteratorNormalCompletion15 = true) {
        var _parent = _step15.value;

        updateNodeColor(_parent);
      }
    } catch (err) {
      _didIteratorError15 = true;
      _iteratorError15 = err;
    } finally {
      try {
        if (!_iteratorNormalCompletion15 && _iterator15.return) {
          _iterator15.return();
        }
      } finally {
        if (_didIteratorError15) {
          throw _iteratorError15;
        }
      }
    }

    updateNodeCounters(SkillTree.getActiveTreeName());
    updateBonuses();
    revertURL();
  }

  function updateNodeColors(treeName) {
    if (treeName == undefined) {
      var _iteratorNormalCompletion16 = true;
      var _didIteratorError16 = false;
      var _iteratorError16 = undefined;

      try {
        for (var _iterator16 = SkillTree.getTrees()[Symbol.iterator](), _step16; !(_iteratorNormalCompletion16 = (_step16 = _iterator16.next()).done); _iteratorNormalCompletion16 = true) {
          var tree = _step16.value;

          updateNodeColors(tree.name);
        }
      } catch (err) {
        _didIteratorError16 = true;
        _iteratorError16 = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion16 && _iterator16.return) {
            _iterator16.return();
          }
        } finally {
          if (_didIteratorError16) {
            throw _iteratorError16;
          }
        }
      }
    } else {
      var _tree = SkillTree.getTree(treeName);
      var _iteratorNormalCompletion17 = true;
      var _didIteratorError17 = false;
      var _iteratorError17 = undefined;

      try {
        for (var _iterator17 = _tree.nodes[Symbol.iterator](), _step17; !(_iteratorNormalCompletion17 = (_step17 = _iterator17.next()).done); _iteratorNormalCompletion17 = true) {
          var _node2 = _step17.value;

          updateNodeColor(_node2);
        }
      } catch (err) {
        _didIteratorError17 = true;
        _iteratorError17 = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion17 && _iterator17.return) {
            _iterator17.return();
          }
        } finally {
          if (_didIteratorError17) {
            throw _iteratorError17;
          }
        }
      }
    }
  }

  function attemptNodeDeselection(node) {
    if (safeToDeselect(node)) {
      node.selected = false;
      updateNodeColor(node);
    }
    var _iteratorNormalCompletion18 = true;
    var _didIteratorError18 = false;
    var _iteratorError18 = undefined;

    try {
      for (var _iterator18 = node.children()[Symbol.iterator](), _step18; !(_iteratorNormalCompletion18 = (_step18 = _iterator18.next()).done); _iteratorNormalCompletion18 = true) {
        var child = _step18.value;

        updateNodeColor(child);
      }
    } catch (err) {
      _didIteratorError18 = true;
      _iteratorError18 = err;
    } finally {
      try {
        if (!_iteratorNormalCompletion18 && _iterator18.return) {
          _iterator18.return();
        }
      } finally {
        if (_didIteratorError18) {
          throw _iteratorError18;
        }
      }
    }

    var _iteratorNormalCompletion19 = true;
    var _didIteratorError19 = false;
    var _iteratorError19 = undefined;

    try {
      for (var _iterator19 = node.parents()[Symbol.iterator](), _step19; !(_iteratorNormalCompletion19 = (_step19 = _iterator19.next()).done); _iteratorNormalCompletion19 = true) {
        var _parent2 = _step19.value;

        updateNodeColor(_parent2);
      }
    } catch (err) {
      _didIteratorError19 = true;
      _iteratorError19 = err;
    } finally {
      try {
        if (!_iteratorNormalCompletion19 && _iterator19.return) {
          _iterator19.return();
        }
      } finally {
        if (_didIteratorError19) {
          throw _iteratorError19;
        }
      }
    }
  }

  function updateNodeColor(node) {
    if (node.selected) {
      if (safeToDeselect(node)) {
        setNodeElementColors(node, "selected");
      } else {
        setNodeElementColors(node, "locked");
      }
    } else {
      if (nodeAvailableForSelection(node)) {
        setNodeElementColors(node, "available");
      } else {
        setNodeElementColors(node, "unavailable");
      }
    }
  }

  function safeToDeselect(node) {
    var safeToDeselect = true;
    var _iteratorNormalCompletion20 = true;
    var _didIteratorError20 = false;
    var _iteratorError20 = undefined;

    try {
      for (var _iterator20 = node.children()[Symbol.iterator](), _step20; !(_iteratorNormalCompletion20 = (_step20 = _iterator20.next()).done); _iteratorNormalCompletion20 = true) {
        var child = _step20.value;

        if (child.selected) {
          // Set node in question to deselected to see if the chlid is still elegible for selection
          // based on other parents.  We"ll set it back to selected after we"re done with that check.
          node.selected = false;
          safeToDeselect = nodeAvailableForSelection(child) && safeToDeselect;
          node.selected = true;
        }
      }
    } catch (err) {
      _didIteratorError20 = true;
      _iteratorError20 = err;
    } finally {
      try {
        if (!_iteratorNormalCompletion20 && _iterator20.return) {
          _iterator20.return();
        }
      } finally {
        if (_didIteratorError20) {
          throw _iteratorError20;
        }
      }
    }

    return safeToDeselect;
  }

  function nodeAvailableForSelection(node) {
    var parentIsSelected = false;
    var _iteratorNormalCompletion21 = true;
    var _didIteratorError21 = false;
    var _iteratorError21 = undefined;

    try {
      for (var _iterator21 = node.parents()[Symbol.iterator](), _step21; !(_iteratorNormalCompletion21 = (_step21 = _iterator21.next()).done); _iteratorNormalCompletion21 = true) {
        var _parent3 = _step21.value;

        parentIsSelected = _parent3.selected || parentIsSelected;
      }
    } catch (err) {
      _didIteratorError21 = true;
      _iteratorError21 = err;
    } finally {
      try {
        if (!_iteratorNormalCompletion21 && _iterator21.return) {
          _iterator21.return();
        }
      } finally {
        if (_didIteratorError21) {
          throw _iteratorError21;
        }
      }
    }

    parentIsSelected = parentIsSelected || node.parents().length === 0;
    return parentIsSelected;
  }

  function setNodeElementColors(node, state) {
    document.getElementById(node.id).querySelectorAll(".node-element").forEach(function (element) {
      removeNodeClasses(element);
      element.classList.add(state);
    });
  }

  function updateNodeDisplay(treeName) {
    if (treeName == undefined) {
      var _iteratorNormalCompletion22 = true;
      var _didIteratorError22 = false;
      var _iteratorError22 = undefined;

      try {
        for (var _iterator22 = SkillTree.getTrees()[Symbol.iterator](), _step22; !(_iteratorNormalCompletion22 = (_step22 = _iterator22.next()).done); _iteratorNormalCompletion22 = true) {
          var tree = _step22.value;

          updateNodeDisplay(tree.name);
        }
      } catch (err) {
        _didIteratorError22 = true;
        _iteratorError22 = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion22 && _iterator22.return) {
            _iterator22.return();
          }
        } finally {
          if (_didIteratorError22) {
            throw _iteratorError22;
          }
        }
      }
    } else {
      var _iteratorNormalCompletion23 = true;
      var _didIteratorError23 = false;
      var _iteratorError23 = undefined;

      try {
        for (var _iterator23 = SkillTree.getTres(treeName).nodes[Symbol.iterator](), _step23; !(_iteratorNormalCompletion23 = (_step23 = _iterator23.next()).done); _iteratorNormalCompletion23 = true) {
          var _node3 = _step23.value;

          updateNodeColor(_node3);
        }
      } catch (err) {
        _didIteratorError23 = true;
        _iteratorError23 = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion23 && _iterator23.return) {
            _iterator23.return();
          }
        } finally {
          if (_didIteratorError23) {
            throw _iteratorError23;
          }
        }
      }
    }
  }

  function updateNodeCounters(treeName) {
    var totalNodesSelected = SkillTree.getSelectedNodes().length;
    document.getElementById("node-selection-counter").textContent = totalNodesSelected;
    if (treeName == undefined) {
      var _iteratorNormalCompletion24 = true;
      var _didIteratorError24 = false;
      var _iteratorError24 = undefined;

      try {
        for (var _iterator24 = SkillTree.getTrees()[Symbol.iterator](), _step24; !(_iteratorNormalCompletion24 = (_step24 = _iterator24.next()).done); _iteratorNormalCompletion24 = true) {
          var tree = _step24.value;

          updateNodeCounters(tree.name);
        }
      } catch (err) {
        _didIteratorError24 = true;
        _iteratorError24 = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion24 && _iterator24.return) {
            _iterator24.return();
          }
        } finally {
          if (_didIteratorError24) {
            throw _iteratorError24;
          }
        }
      }
    } else {
      var tab = document.getElementById(treeName.toLowerCase() + "-tab-counter");
      var nodesSelected = SkillTree.getSelectedNodes(treeName).length;
      var nodesTotal = SkillTree.getNodeCount(treeName);
      tab.textContent = nodesSelected + " / " + nodesTotal;
    }
    var totalCbillCost = (totalNodesSelected * cbillsPerNode).toLocaleString("en-US") + " C-Bills and";
    var totalXpCost = (totalNodesSelected * xpPerNode).toLocaleString("en-US") + " XP / GXP";
    document.getElementById("cost-totals-display").innerHTML = totalCbillCost + "</br>" + totalXpCost;
  }

  function updateBonuses() {
    var bonuses = [];
    var nodes = SkillTree.getSelectedNodes();
    var _iteratorNormalCompletion25 = true;
    var _didIteratorError25 = false;
    var _iteratorError25 = undefined;

    try {
      for (var _iterator25 = nodes[Symbol.iterator](), _step25; !(_iteratorNormalCompletion25 = (_step25 = _iterator25.next()).done); _iteratorNormalCompletion25 = true) {
        var _node4 = _step25.value;

        var bonusForAttribute = getBonusForAttribute(bonuses, _node4.attribute);
        if (bonusForAttribute != undefined) {
          bonusForAttribute.value = (bonusForAttribute.value * 10 + _node4.value * 10) / 10;
        } else {
          bonuses.push({ attribute: _node4.attribute, value: _node4.value, valueTemplate: _node4.valueTemplate });
        }
      }
    } catch (err) {
      _didIteratorError25 = true;
      _iteratorError25 = err;
    } finally {
      try {
        if (!_iteratorNormalCompletion25 && _iterator25.return) {
          _iterator25.return();
        }
      } finally {
        if (_didIteratorError25) {
          throw _iteratorError25;
        }
      }
    }

    document.getElementById("bonuses-display").innerHTML = null;
    bonuses.forEach(function (bonus, index) {
      var bonusDisplayElement = document.createElement("div");
      bonusDisplayElement.id = bonusAttributeToId(bonus.attribute);
      bonusDisplayElement.classList.add("bonus-display");
      bonusDisplayElement.textContent = bonus.attribute + " " + getValueTemplate(bonus.attribute)[0] + bonus.value + getValueTemplate(bonus.attribute)[1];
      document.getElementById("bonuses-display").append(bonusDisplayElement);
    });
    if (document.getElementById("bonuses-display").offsetHeight > 560) {
      document.querySelectorAll(".bonus-display").forEach(function (el) {
        el.style.fontSize = "12px";
      });
    }
  }

  function getBonusForAttribute(bonuses, attribute) {
    var _iteratorNormalCompletion26 = true;
    var _didIteratorError26 = false;
    var _iteratorError26 = undefined;

    try {
      for (var _iterator26 = bonuses[Symbol.iterator](), _step26; !(_iteratorNormalCompletion26 = (_step26 = _iterator26.next()).done); _iteratorNormalCompletion26 = true) {
        var bonus = _step26.value;

        if (bonus.attribute == attribute) {
          return bonus;
        }
      }
    } catch (err) {
      _didIteratorError26 = true;
      _iteratorError26 = err;
    } finally {
      try {
        if (!_iteratorNormalCompletion26 && _iterator26.return) {
          _iterator26.return();
        }
      } finally {
        if (_didIteratorError26) {
          throw _iteratorError26;
        }
      }
    }
  }

  function getValueTemplate(attribute) {
    var _iteratorNormalCompletion27 = true;
    var _didIteratorError27 = false;
    var _iteratorError27 = undefined;

    try {
      for (var _iterator27 = attributeTemplateMap[Symbol.iterator](), _step27; !(_iteratorNormalCompletion27 = (_step27 = _iterator27.next()).done); _iteratorNormalCompletion27 = true) {
        var mapping = _step27.value;

        if (mapping.attribute == attribute) {
          return [mapping.template.split("{}")[0], mapping.template.split("{}")[1]];
        }
      }
    } catch (err) {
      _didIteratorError27 = true;
      _iteratorError27 = err;
    } finally {
      try {
        if (!_iteratorNormalCompletion27 && _iterator27.return) {
          _iterator27.return();
        }
      } finally {
        if (_didIteratorError27) {
          throw _iteratorError27;
        }
      }
    }

    console.log("value template not found for attribute " + attribute);
  }

  function changeSkillTree(treeName) {
    SkillTree.setActiveTreeName(treeName);
    document.querySelectorAll(".tab").forEach(function (el) {
      el.classList.remove("selected");
    });
    console.log(treeName);
    getTabForTreeName(treeName).classList.add("selected");

    document.querySelectorAll(".skill-tree").forEach(function (el) {
      el.classList.add("hide");
    });
    var treeElement = document.getElementById(treeNameToId(treeName));
    treeElement.classList.remove("hide");
    var treeDisplayWidth = dimensionAsNumber(treeElement.style.width);
    var totalWidth = treeDisplayWidth + 294 + "px";
    document.getElementById("modal-overlay").style.width = totalWidth;
    document.getElementById("footer").style.width = totalWidth;
  }

  function getTabForTreeName(treeName) {
    return document.getElementById(stringToCss(treeName) + "-tab");
  }

  function treeNameToId(treeName) {
    return stringToCss(treeName) + "-skill-tree";
  }

  function bonusAttributeToId(attribute) {
    return stringToCss(attribute) + "bonus-display";
  }

  function nodeNameToId(nodeName) {
    return stringToCss(nodeName);
  }

  function stringToCss(string) {
    return string.replace(/ /g, "-").toLowerCase();
  }

  function removeNodeClasses(nodeElement) {
    nodeElement.classList.remove("selected");
    nodeElement.classList.remove("available");
    nodeElement.classList.remove("locked");
    nodeElement.classList.remove("unavailable");
  }

  document.getElementById("download-image-button").addEventListener("click", function () {
    var canvas = document.getElementById("canvas");
    var treeHTML = document.getElementById(treeNameToId(SkillTree.getActiveTreeName()));
    rasterizeHTML.drawDocument(treeHTML, canvas);
  });

  document.getElementById("reset-tree-button").addEventListener("click", function () {
    resetTree(SkillTree.getActiveTreeName());
  });

  document.getElementById("reset-all-button").addEventListener("click", function () {
    var _iteratorNormalCompletion28 = true;
    var _didIteratorError28 = false;
    var _iteratorError28 = undefined;

    try {
      for (var _iterator28 = SkillTree.getTrees()[Symbol.iterator](), _step28; !(_iteratorNormalCompletion28 = (_step28 = _iterator28.next()).done); _iteratorNormalCompletion28 = true) {
        var tree = _step28.value;

        resetTree(tree.name);
      }
    } catch (err) {
      _didIteratorError28 = true;
      _iteratorError28 = err;
    } finally {
      try {
        if (!_iteratorNormalCompletion28 && _iterator28.return) {
          _iterator28.return();
        }
      } finally {
        if (_didIteratorError28) {
          throw _iteratorError28;
        }
      }
    }
  });

  document.getElementById("select-tree-button").addEventListener("click", function () {
    selectAllNodes(SkillTree.getActiveTreeName());
  });

  function resetTree(treeName) {
    var tree = SkillTree.getTree(treeName);
    var _iteratorNormalCompletion29 = true;
    var _didIteratorError29 = false;
    var _iteratorError29 = undefined;

    try {
      for (var _iterator29 = tree.nodes[Symbol.iterator](), _step29; !(_iteratorNormalCompletion29 = (_step29 = _iterator29.next()).done); _iteratorNormalCompletion29 = true) {
        var _node5 = _step29.value;

        _node5.selected = false;
      }
    } catch (err) {
      _didIteratorError29 = true;
      _iteratorError29 = err;
    } finally {
      try {
        if (!_iteratorNormalCompletion29 && _iterator29.return) {
          _iterator29.return();
        }
      } finally {
        if (_didIteratorError29) {
          throw _iteratorError29;
        }
      }
    }

    updateNodeCounters(treeName);
    updateBonuses();
    updateNodeColors(treeName);
    revertURL();
  }

  function selectAllNodes(treeName) {
    var availableNodes = maxSkillNodes - SkillTree.getSelectedNodes().length;
    var tree = SkillTree.getTree(treeName);
    if (availableNodes > tree.nodes.length) {
      var _iteratorNormalCompletion30 = true;
      var _didIteratorError30 = false;
      var _iteratorError30 = undefined;

      try {
        for (var _iterator30 = tree.nodes[Symbol.iterator](), _step30; !(_iteratorNormalCompletion30 = (_step30 = _iterator30.next()).done); _iteratorNormalCompletion30 = true) {
          var _node6 = _step30.value;

          _node6.selected = true;
        }
      } catch (err) {
        _didIteratorError30 = true;
        _iteratorError30 = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion30 && _iterator30.return) {
            _iterator30.return();
          }
        } finally {
          if (_didIteratorError30) {
            throw _iteratorError30;
          }
        }
      }

      updateNodeCounters(treeName);
      updateBonuses();
      updateNodeColors(treeName);
      revertURL();
    }
  }

  function loadFromRemoteId() {
    var regex = /([^//?]*)$/;
    var remoteId = regex.exec(window.location.href)[1];

    if (remoteId != undefined && remoteId != "") {
      setModalCloseability(false);
      document.getElementById("modal-overlay").classList.remove("hide");
      document.getElementById("permalink-display").textContent = "Reactor online, weapons online, sensors online....";

      fetch("https://jsonblob.com/api/jsonBlob/" + remoteId, {
        method: "GET",
        headers: {
          "Content-Type": "application/json"
        }
      }).then(function (response) {
        if (response.ok) {
          return response.json();
        } else {
          console.log("Error response - " + response);
        }
      }).then(function (json) {
        importTrees(json['trees']);
        updateNodeCounters();
        updateBonuses();
        updateNodeColors();
        changeSkillTree(json['activeTreeName']);
        document.getElementById("modal-overlay").classList.add("hide");
      });
    }
  }

  document.getElementById("permalink-button").addEventListener("click", function () {
    setModalCloseability(false);
    document.getElementById("permalink-display").textContent = "Permalink inbound on your position.";
    document.getElementById("modal-overlay").classList.remove("hide");
    fetch("https://jsonblob.com/api/jsonBlob", {
      method: "POST",
      body: serializeTrees(),
      headers: {
        "Content-Type": "application/json"
      }
    }).then(function (response) {
      var regex = /([^//]*)$/;
      var remoteId = regex.exec(response.headers.get("location"))[0];
      document.getElementById("permalink-display").textContent = pushRemoteIdToURL(remoteId);
      document.getElementById("modal-overlay").classList.remove("hide");
      setModalCloseability(true);
    }, function (error) {
      console.log(error.message);
      setModalCloseability(true);
    });
  });

  function serializeTrees() {
    var trees = SkillTree.getTrees();
    var serializedTrees = {};
    serializedTrees.trees = [];
    serializedTrees.activeTreeName = SkillTree.getActiveTreeName();
    var _iteratorNormalCompletion31 = true;
    var _didIteratorError31 = false;
    var _iteratorError31 = undefined;

    try {
      for (var _iterator31 = trees[Symbol.iterator](), _step31; !(_iteratorNormalCompletion31 = (_step31 = _iterator31.next()).done); _iteratorNormalCompletion31 = true) {
        var tree = _step31.value;

        var serializedTree = {
          name: tree.name,
          nodes: []
        };
        var _iteratorNormalCompletion32 = true;
        var _didIteratorError32 = false;
        var _iteratorError32 = undefined;

        try {
          for (var _iterator32 = tree.nodes[Symbol.iterator](), _step32; !(_iteratorNormalCompletion32 = (_step32 = _iterator32.next()).done); _iteratorNormalCompletion32 = true) {
            var _node7 = _step32.value;

            serializedTree.nodes.push(serializeNode(_node7));
          }
        } catch (err) {
          _didIteratorError32 = true;
          _iteratorError32 = err;
        } finally {
          try {
            if (!_iteratorNormalCompletion32 && _iterator32.return) {
              _iterator32.return();
            }
          } finally {
            if (_didIteratorError32) {
              throw _iteratorError32;
            }
          }
        }

        serializedTrees.trees.push(serializedTree);
      }
    } catch (err) {
      _didIteratorError31 = true;
      _iteratorError31 = err;
    } finally {
      try {
        if (!_iteratorNormalCompletion31 && _iterator31.return) {
          _iterator31.return();
        }
      } finally {
        if (_didIteratorError31) {
          throw _iteratorError31;
        }
      }
    }

    return JSON.stringify(serializedTrees);
  }

  function serializeNode(node) {
    var s = void 0;
    if (node.selected) {
      s = 1;
    } else {
      s = 0;
    }
    return {
      id: node.id,
      s: s
    };
  }

  function importTrees(serializedTrees) {
    var _iteratorNormalCompletion33 = true;
    var _didIteratorError33 = false;
    var _iteratorError33 = undefined;

    try {
      for (var _iterator33 = serializedTrees[Symbol.iterator](), _step33; !(_iteratorNormalCompletion33 = (_step33 = _iterator33.next()).done); _iteratorNormalCompletion33 = true) {
        var serializedTree = _step33.value;

        var tree = SkillTree.getTree(serializedTree.name);
        var serializedNodes = serializedTree.nodes;
        var _iteratorNormalCompletion34 = true;
        var _didIteratorError34 = false;
        var _iteratorError34 = undefined;

        try {
          for (var _iterator34 = serializedNodes[Symbol.iterator](), _step34; !(_iteratorNormalCompletion34 = (_step34 = _iterator34.next()).done); _iteratorNormalCompletion34 = true) {
            var serializedNode = _step34.value;
            var _iteratorNormalCompletion35 = true;
            var _didIteratorError35 = false;
            var _iteratorError35 = undefined;

            try {
              for (var _iterator35 = tree.nodes[Symbol.iterator](), _step35; !(_iteratorNormalCompletion35 = (_step35 = _iterator35.next()).done); _iteratorNormalCompletion35 = true) {
                var _node8 = _step35.value;

                if (serializedNode.id == _node8.id) {
                  if (serializedNode.s == 1) {
                    _node8.selected = true;
                  } else {
                    _node8.selected = false;
                  }
                }
              }
            } catch (err) {
              _didIteratorError35 = true;
              _iteratorError35 = err;
            } finally {
              try {
                if (!_iteratorNormalCompletion35 && _iterator35.return) {
                  _iterator35.return();
                }
              } finally {
                if (_didIteratorError35) {
                  throw _iteratorError35;
                }
              }
            }
          }
        } catch (err) {
          _didIteratorError34 = true;
          _iteratorError34 = err;
        } finally {
          try {
            if (!_iteratorNormalCompletion34 && _iterator34.return) {
              _iterator34.return();
            }
          } finally {
            if (_didIteratorError34) {
              throw _iteratorError34;
            }
          }
        }
      }
    } catch (err) {
      _didIteratorError33 = true;
      _iteratorError33 = err;
    } finally {
      try {
        if (!_iteratorNormalCompletion33 && _iterator33.return) {
          _iterator33.return();
        }
      } finally {
        if (_didIteratorError33) {
          throw _iteratorError33;
        }
      }
    }
  }

  function pushRemoteIdToURL(remoteId) {
    var remoteURL = window.location.origin + window.location.pathname + "?" + remoteId;
    history.pushState({}, "", remoteURL);
    return remoteURL;
  }

  function revertURL() {
    history.pushState({}, "", window.location.origin + window.location.pathname);
  }

  // takes a boolean
  function setModalCloseability(closeability) {
    document.getElementById("modal-overlay").setAttribute("data-closeable", closeability.toString());
  }

  document.getElementById("modal-overlay").addEventListener("click", function () {
    var closeable = document.getElementById("modal-overlay").getAttribute("data-closeable");
    if (closeable == "true") {
      document.getElementById("modal-overlay").classList.add("hide");
    }
  });

  document.getElementById("permalink-display").addEventListener("click", function (event) {
    event.stopPropagation();
  });

  // strips the "px" off the end of a CSS dimension, returns the number value
  function dimensionAsNumber(dimension) {
    return parseFloat(dimension.slice(0, -2));
  }

  loadFromRemoteId();
});

}());
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
